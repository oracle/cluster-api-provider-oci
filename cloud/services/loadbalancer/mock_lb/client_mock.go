// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_lb is a generated GoMock package.
package mock_lb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	loadbalancer "github.com/oracle/oci-go-sdk/v65/loadbalancer"
)

// MockLoadBalancerClient is a mock of LoadBalancerClient interface.
type MockLoadBalancerClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoadBalancerClientMockRecorder
}

// MockLoadBalancerClientMockRecorder is the mock recorder for MockLoadBalancerClient.
type MockLoadBalancerClientMockRecorder struct {
	mock *MockLoadBalancerClient
}

// NewMockLoadBalancerClient creates a new mock instance.
func NewMockLoadBalancerClient(ctrl *gomock.Controller) *MockLoadBalancerClient {
	mock := &MockLoadBalancerClient{ctrl: ctrl}
	mock.recorder = &MockLoadBalancerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadBalancerClient) EXPECT() *MockLoadBalancerClientMockRecorder {
	return m.recorder
}

// CreateBackend mocks base method.
func (m *MockLoadBalancerClient) CreateBackend(arg0 context.Context, arg1 loadbalancer.CreateBackendRequest) (loadbalancer.CreateBackendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackend", arg0, arg1)
	ret0, _ := ret[0].(loadbalancer.CreateBackendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackend indicates an expected call of CreateBackend.
func (mr *MockLoadBalancerClientMockRecorder) CreateBackend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackend", reflect.TypeOf((*MockLoadBalancerClient)(nil).CreateBackend), arg0, arg1)
}

// CreateLoadBalancer mocks base method.
func (m *MockLoadBalancerClient) CreateLoadBalancer(arg0 context.Context, arg1 loadbalancer.CreateLoadBalancerRequest) (loadbalancer.CreateLoadBalancerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(loadbalancer.CreateLoadBalancerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockLoadBalancerClientMockRecorder) CreateLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockLoadBalancerClient)(nil).CreateLoadBalancer), arg0, arg1)
}

// DeleteBackend mocks base method.
func (m *MockLoadBalancerClient) DeleteBackend(arg0 context.Context, arg1 loadbalancer.DeleteBackendRequest) (loadbalancer.DeleteBackendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackend", arg0, arg1)
	ret0, _ := ret[0].(loadbalancer.DeleteBackendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackend indicates an expected call of DeleteBackend.
func (mr *MockLoadBalancerClientMockRecorder) DeleteBackend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackend", reflect.TypeOf((*MockLoadBalancerClient)(nil).DeleteBackend), arg0, arg1)
}

// DeleteLoadBalancer mocks base method.
func (m *MockLoadBalancerClient) DeleteLoadBalancer(arg0 context.Context, arg1 loadbalancer.DeleteLoadBalancerRequest) (loadbalancer.DeleteLoadBalancerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(loadbalancer.DeleteLoadBalancerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockLoadBalancerClientMockRecorder) DeleteLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockLoadBalancerClient)(nil).DeleteLoadBalancer), arg0, arg1)
}

// GetLoadBalancer mocks base method.
func (m *MockLoadBalancerClient) GetLoadBalancer(arg0 context.Context, arg1 loadbalancer.GetLoadBalancerRequest) (loadbalancer.GetLoadBalancerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(loadbalancer.GetLoadBalancerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockLoadBalancerClientMockRecorder) GetLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockLoadBalancerClient)(nil).GetLoadBalancer), arg0, arg1)
}

// GetWorkRequest mocks base method.
func (m *MockLoadBalancerClient) GetWorkRequest(arg0 context.Context, arg1 loadbalancer.GetWorkRequestRequest) (loadbalancer.GetWorkRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkRequest", arg0, arg1)
	ret0, _ := ret[0].(loadbalancer.GetWorkRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkRequest indicates an expected call of GetWorkRequest.
func (mr *MockLoadBalancerClientMockRecorder) GetWorkRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkRequest", reflect.TypeOf((*MockLoadBalancerClient)(nil).GetWorkRequest), arg0, arg1)
}

// ListLoadBalancers mocks base method.
func (m *MockLoadBalancerClient) ListLoadBalancers(arg0 context.Context, arg1 loadbalancer.ListLoadBalancersRequest) (loadbalancer.ListLoadBalancersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancers", arg0, arg1)
	ret0, _ := ret[0].(loadbalancer.ListLoadBalancersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancers indicates an expected call of ListLoadBalancers.
func (mr *MockLoadBalancerClientMockRecorder) ListLoadBalancers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancers", reflect.TypeOf((*MockLoadBalancerClient)(nil).ListLoadBalancers), arg0, arg1)
}

// UpdateLoadBalancer mocks base method.
func (m *MockLoadBalancerClient) UpdateLoadBalancer(arg0 context.Context, arg1 loadbalancer.UpdateLoadBalancerRequest) (loadbalancer.UpdateLoadBalancerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", arg0, arg1)
	ret0, _ := ret[0].(loadbalancer.UpdateLoadBalancerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer.
func (mr *MockLoadBalancerClientMockRecorder) UpdateLoadBalancer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockLoadBalancerClient)(nil).UpdateLoadBalancer), arg0, arg1)
}
