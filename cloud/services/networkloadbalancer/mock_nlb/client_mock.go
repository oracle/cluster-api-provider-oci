// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_nlb is a generated GoMock package.
package mock_nlb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	networkloadbalancer "github.com/oracle/oci-go-sdk/v65/networkloadbalancer"
)

// MockNetworkLoadBalancerClient is a mock_computemanagement of LoadBalancerClient interface.
type MockNetworkLoadBalancerClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkLoadBalancerClientMockRecorder
}

// MockNetworkLoadBalancerClientMockRecorder is the mock_computemanagement recorder for MockNetworkLoadBalancerClient.
type MockNetworkLoadBalancerClientMockRecorder struct {
	mock *MockNetworkLoadBalancerClient
}

// NewMockNetworkLoadBalancerClient creates a new mock_computemanagement instance.
func NewMockNetworkLoadBalancerClient(ctrl *gomock.Controller) *MockNetworkLoadBalancerClient {
	mock := &MockNetworkLoadBalancerClient{ctrl: ctrl}
	mock.recorder = &MockNetworkLoadBalancerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkLoadBalancerClient) EXPECT() *MockNetworkLoadBalancerClientMockRecorder {
	return m.recorder
}

// CreateBackend mocks base method.
func (m *MockNetworkLoadBalancerClient) CreateBackend(ctx context.Context, request networkloadbalancer.CreateBackendRequest) (networkloadbalancer.CreateBackendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackend", ctx, request)
	ret0, _ := ret[0].(networkloadbalancer.CreateBackendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackend indicates an expected call of CreateBackend.
func (mr *MockNetworkLoadBalancerClientMockRecorder) CreateBackend(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackend", reflect.TypeOf((*MockNetworkLoadBalancerClient)(nil).CreateBackend), ctx, request)
}

// CreateNetworkLoadBalancer mocks base method.
func (m *MockNetworkLoadBalancerClient) CreateNetworkLoadBalancer(ctx context.Context, request networkloadbalancer.CreateNetworkLoadBalancerRequest) (networkloadbalancer.CreateNetworkLoadBalancerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkLoadBalancer", ctx, request)
	ret0, _ := ret[0].(networkloadbalancer.CreateNetworkLoadBalancerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkLoadBalancer indicates an expected call of CreateNetworkLoadBalancer.
func (mr *MockNetworkLoadBalancerClientMockRecorder) CreateNetworkLoadBalancer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkLoadBalancer", reflect.TypeOf((*MockNetworkLoadBalancerClient)(nil).CreateNetworkLoadBalancer), ctx, request)
}

// DeleteBackend mocks base method.
func (m *MockNetworkLoadBalancerClient) DeleteBackend(ctx context.Context, request networkloadbalancer.DeleteBackendRequest) (networkloadbalancer.DeleteBackendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackend", ctx, request)
	ret0, _ := ret[0].(networkloadbalancer.DeleteBackendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBackend indicates an expected call of DeleteBackend.
func (mr *MockNetworkLoadBalancerClientMockRecorder) DeleteBackend(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackend", reflect.TypeOf((*MockNetworkLoadBalancerClient)(nil).DeleteBackend), ctx, request)
}

// DeleteNetworkLoadBalancer mocks base method.
func (m *MockNetworkLoadBalancerClient) DeleteNetworkLoadBalancer(ctx context.Context, request networkloadbalancer.DeleteNetworkLoadBalancerRequest) (networkloadbalancer.DeleteNetworkLoadBalancerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkLoadBalancer", ctx, request)
	ret0, _ := ret[0].(networkloadbalancer.DeleteNetworkLoadBalancerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetworkLoadBalancer indicates an expected call of DeleteNetworkLoadBalancer.
func (mr *MockNetworkLoadBalancerClientMockRecorder) DeleteNetworkLoadBalancer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkLoadBalancer", reflect.TypeOf((*MockNetworkLoadBalancerClient)(nil).DeleteNetworkLoadBalancer), ctx, request)
}

// GetNetworkLoadBalancer mocks base method.
func (m *MockNetworkLoadBalancerClient) GetNetworkLoadBalancer(ctx context.Context, request networkloadbalancer.GetNetworkLoadBalancerRequest) (networkloadbalancer.GetNetworkLoadBalancerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancer", ctx, request)
	ret0, _ := ret[0].(networkloadbalancer.GetNetworkLoadBalancerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLoadBalancer indicates an expected call of GetNetworkLoadBalancer.
func (mr *MockNetworkLoadBalancerClientMockRecorder) GetNetworkLoadBalancer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancer", reflect.TypeOf((*MockNetworkLoadBalancerClient)(nil).GetNetworkLoadBalancer), ctx, request)
}

// GetWorkRequest mocks base method.
func (m *MockNetworkLoadBalancerClient) GetWorkRequest(ctx context.Context, request networkloadbalancer.GetWorkRequestRequest) (networkloadbalancer.GetWorkRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkRequest", ctx, request)
	ret0, _ := ret[0].(networkloadbalancer.GetWorkRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkRequest indicates an expected call of GetWorkRequest.
func (mr *MockNetworkLoadBalancerClientMockRecorder) GetWorkRequest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkRequest", reflect.TypeOf((*MockNetworkLoadBalancerClient)(nil).GetWorkRequest), ctx, request)
}

// ListNetworkLoadBalancers mocks base method.
func (m *MockNetworkLoadBalancerClient) ListNetworkLoadBalancers(ctx context.Context, request networkloadbalancer.ListNetworkLoadBalancersRequest) (networkloadbalancer.ListNetworkLoadBalancersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkLoadBalancers", ctx, request)
	ret0, _ := ret[0].(networkloadbalancer.ListNetworkLoadBalancersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkLoadBalancers indicates an expected call of ListNetworkLoadBalancers.
func (mr *MockNetworkLoadBalancerClientMockRecorder) ListNetworkLoadBalancers(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkLoadBalancers", reflect.TypeOf((*MockNetworkLoadBalancerClient)(nil).ListNetworkLoadBalancers), ctx, request)
}

// UpdateNetworkLoadBalancer mocks base method.
func (m *MockNetworkLoadBalancerClient) UpdateNetworkLoadBalancer(ctx context.Context, request networkloadbalancer.UpdateNetworkLoadBalancerRequest) (networkloadbalancer.UpdateNetworkLoadBalancerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkLoadBalancer", ctx, request)
	ret0, _ := ret[0].(networkloadbalancer.UpdateNetworkLoadBalancerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkLoadBalancer indicates an expected call of UpdateNetworkLoadBalancer.
func (mr *MockNetworkLoadBalancerClientMockRecorder) UpdateNetworkLoadBalancer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkLoadBalancer", reflect.TypeOf((*MockNetworkLoadBalancerClient)(nil).UpdateNetworkLoadBalancer), ctx, request)
}
