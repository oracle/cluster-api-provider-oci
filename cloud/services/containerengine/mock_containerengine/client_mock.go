// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_containerengine is a generated GoMock package.
package mock_containerengine

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	containerengine "github.com/oracle/oci-go-sdk/v65/containerengine"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method.
func (m *MockClient) CreateCluster(ctx context.Context, request containerengine.CreateClusterRequest) (containerengine.CreateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCluster", ctx, request)
	ret0, _ := ret[0].(containerengine.CreateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster.
func (mr *MockClientMockRecorder) CreateCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClient)(nil).CreateCluster), ctx, request)
}

// CreateKubeconfig mocks base method.
func (m *MockClient) CreateKubeconfig(ctx context.Context, request containerengine.CreateKubeconfigRequest) (containerengine.CreateKubeconfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKubeconfig", ctx, request)
	ret0, _ := ret[0].(containerengine.CreateKubeconfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKubeconfig indicates an expected call of CreateKubeconfig.
func (mr *MockClientMockRecorder) CreateKubeconfig(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKubeconfig", reflect.TypeOf((*MockClient)(nil).CreateKubeconfig), ctx, request)
}

// CreateNodePool mocks base method.
func (m *MockClient) CreateNodePool(ctx context.Context, request containerengine.CreateNodePoolRequest) (containerengine.CreateNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNodePool", ctx, request)
	ret0, _ := ret[0].(containerengine.CreateNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodePool indicates an expected call of CreateNodePool.
func (mr *MockClientMockRecorder) CreateNodePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodePool", reflect.TypeOf((*MockClient)(nil).CreateNodePool), ctx, request)
}

// CreateVirtualNodePool mocks base method.
func (m *MockClient) CreateVirtualNodePool(ctx context.Context, request containerengine.CreateVirtualNodePoolRequest) (containerengine.CreateVirtualNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualNodePool", ctx, request)
	ret0, _ := ret[0].(containerengine.CreateVirtualNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualNodePool indicates an expected call of CreateVirtualNodePool.
func (mr *MockClientMockRecorder) CreateVirtualNodePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualNodePool", reflect.TypeOf((*MockClient)(nil).CreateVirtualNodePool), ctx, request)
}

// DeleteCluster mocks base method.
func (m *MockClient) DeleteCluster(ctx context.Context, request containerengine.DeleteClusterRequest) (containerengine.DeleteClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, request)
	ret0, _ := ret[0].(containerengine.DeleteClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockClientMockRecorder) DeleteCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClient)(nil).DeleteCluster), ctx, request)
}

// DeleteNodePool mocks base method.
func (m *MockClient) DeleteNodePool(ctx context.Context, request containerengine.DeleteNodePoolRequest) (containerengine.DeleteNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodePool", ctx, request)
	ret0, _ := ret[0].(containerengine.DeleteNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodePool indicates an expected call of DeleteNodePool.
func (mr *MockClientMockRecorder) DeleteNodePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodePool", reflect.TypeOf((*MockClient)(nil).DeleteNodePool), ctx, request)
}

// DeleteVirtualNodePool mocks base method.
func (m *MockClient) DeleteVirtualNodePool(ctx context.Context, request containerengine.DeleteVirtualNodePoolRequest) (containerengine.DeleteVirtualNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVirtualNodePool", ctx, request)
	ret0, _ := ret[0].(containerengine.DeleteVirtualNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVirtualNodePool indicates an expected call of DeleteVirtualNodePool.
func (mr *MockClientMockRecorder) DeleteVirtualNodePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVirtualNodePool", reflect.TypeOf((*MockClient)(nil).DeleteVirtualNodePool), ctx, request)
}

// DisableAddon mocks base method.
func (m *MockClient) DisableAddon(ctx context.Context, request containerengine.DisableAddonRequest) (containerengine.DisableAddonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAddon", ctx, request)
	ret0, _ := ret[0].(containerengine.DisableAddonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableAddon indicates an expected call of DisableAddon.
func (mr *MockClientMockRecorder) DisableAddon(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAddon", reflect.TypeOf((*MockClient)(nil).DisableAddon), ctx, request)
}

// GetAddon mocks base method.
func (m *MockClient) GetAddon(ctx context.Context, request containerengine.GetAddonRequest) (containerengine.GetAddonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddon", ctx, request)
	ret0, _ := ret[0].(containerengine.GetAddonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddon indicates an expected call of GetAddon.
func (mr *MockClientMockRecorder) GetAddon(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddon", reflect.TypeOf((*MockClient)(nil).GetAddon), ctx, request)
}

// GetCluster mocks base method.
func (m *MockClient) GetCluster(ctx context.Context, request containerengine.GetClusterRequest) (containerengine.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", ctx, request)
	ret0, _ := ret[0].(containerengine.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClientMockRecorder) GetCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClient)(nil).GetCluster), ctx, request)
}

// GetNodePool mocks base method.
func (m *MockClient) GetNodePool(ctx context.Context, request containerengine.GetNodePoolRequest) (containerengine.GetNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePool", ctx, request)
	ret0, _ := ret[0].(containerengine.GetNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePool indicates an expected call of GetNodePool.
func (mr *MockClientMockRecorder) GetNodePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePool", reflect.TypeOf((*MockClient)(nil).GetNodePool), ctx, request)
}

// GetNodePoolOptions mocks base method.
func (m *MockClient) GetNodePoolOptions(ctx context.Context, request containerengine.GetNodePoolOptionsRequest) (containerengine.GetNodePoolOptionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodePoolOptions", ctx, request)
	ret0, _ := ret[0].(containerengine.GetNodePoolOptionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodePoolOptions indicates an expected call of GetNodePoolOptions.
func (mr *MockClientMockRecorder) GetNodePoolOptions(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePoolOptions", reflect.TypeOf((*MockClient)(nil).GetNodePoolOptions), ctx, request)
}

// GetVirtualNodePool mocks base method.
func (m *MockClient) GetVirtualNodePool(ctx context.Context, request containerengine.GetVirtualNodePoolRequest) (containerengine.GetVirtualNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVirtualNodePool", ctx, request)
	ret0, _ := ret[0].(containerengine.GetVirtualNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVirtualNodePool indicates an expected call of GetVirtualNodePool.
func (mr *MockClientMockRecorder) GetVirtualNodePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVirtualNodePool", reflect.TypeOf((*MockClient)(nil).GetVirtualNodePool), ctx, request)
}

// GetWorkRequest mocks base method.
func (m *MockClient) GetWorkRequest(ctx context.Context, request containerengine.GetWorkRequestRequest) (containerengine.GetWorkRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkRequest", ctx, request)
	ret0, _ := ret[0].(containerengine.GetWorkRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkRequest indicates an expected call of GetWorkRequest.
func (mr *MockClientMockRecorder) GetWorkRequest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkRequest", reflect.TypeOf((*MockClient)(nil).GetWorkRequest), ctx, request)
}

// InstallAddon mocks base method.
func (m *MockClient) InstallAddon(ctx context.Context, request containerengine.InstallAddonRequest) (containerengine.InstallAddonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallAddon", ctx, request)
	ret0, _ := ret[0].(containerengine.InstallAddonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallAddon indicates an expected call of InstallAddon.
func (mr *MockClientMockRecorder) InstallAddon(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallAddon", reflect.TypeOf((*MockClient)(nil).InstallAddon), ctx, request)
}

// ListAddons mocks base method.
func (m *MockClient) ListAddons(ctx context.Context, request containerengine.ListAddonsRequest) (containerengine.ListAddonsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddons", ctx, request)
	ret0, _ := ret[0].(containerengine.ListAddonsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddons indicates an expected call of ListAddons.
func (mr *MockClientMockRecorder) ListAddons(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddons", reflect.TypeOf((*MockClient)(nil).ListAddons), ctx, request)
}

// ListClusters mocks base method.
func (m *MockClient) ListClusters(ctx context.Context, request containerengine.ListClustersRequest) (containerengine.ListClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClusters", ctx, request)
	ret0, _ := ret[0].(containerengine.ListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockClientMockRecorder) ListClusters(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockClient)(nil).ListClusters), ctx, request)
}

// ListNodePools mocks base method.
func (m *MockClient) ListNodePools(ctx context.Context, request containerengine.ListNodePoolsRequest) (containerengine.ListNodePoolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodePools", ctx, request)
	ret0, _ := ret[0].(containerengine.ListNodePoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodePools indicates an expected call of ListNodePools.
func (mr *MockClientMockRecorder) ListNodePools(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodePools", reflect.TypeOf((*MockClient)(nil).ListNodePools), ctx, request)
}

// ListVirtualNodePools mocks base method.
func (m *MockClient) ListVirtualNodePools(ctx context.Context, request containerengine.ListVirtualNodePoolsRequest) (containerengine.ListVirtualNodePoolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualNodePools", ctx, request)
	ret0, _ := ret[0].(containerengine.ListVirtualNodePoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualNodePools indicates an expected call of ListVirtualNodePools.
func (mr *MockClientMockRecorder) ListVirtualNodePools(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualNodePools", reflect.TypeOf((*MockClient)(nil).ListVirtualNodePools), ctx, request)
}

// ListVirtualNodes mocks base method.
func (m *MockClient) ListVirtualNodes(ctx context.Context, request containerengine.ListVirtualNodesRequest) (containerengine.ListVirtualNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVirtualNodes", ctx, request)
	ret0, _ := ret[0].(containerengine.ListVirtualNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVirtualNodes indicates an expected call of ListVirtualNodes.
func (mr *MockClientMockRecorder) ListVirtualNodes(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVirtualNodes", reflect.TypeOf((*MockClient)(nil).ListVirtualNodes), ctx, request)
}

// UpdateAddon mocks base method.
func (m *MockClient) UpdateAddon(ctx context.Context, request containerengine.UpdateAddonRequest) (containerengine.UpdateAddonResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddon", ctx, request)
	ret0, _ := ret[0].(containerengine.UpdateAddonResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddon indicates an expected call of UpdateAddon.
func (mr *MockClientMockRecorder) UpdateAddon(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddon", reflect.TypeOf((*MockClient)(nil).UpdateAddon), ctx, request)
}

// UpdateCluster mocks base method.
func (m *MockClient) UpdateCluster(ctx context.Context, request containerengine.UpdateClusterRequest) (containerengine.UpdateClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", ctx, request)
	ret0, _ := ret[0].(containerengine.UpdateClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockClientMockRecorder) UpdateCluster(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockClient)(nil).UpdateCluster), ctx, request)
}

// UpdateNodePool mocks base method.
func (m *MockClient) UpdateNodePool(ctx context.Context, request containerengine.UpdateNodePoolRequest) (containerengine.UpdateNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodePool", ctx, request)
	ret0, _ := ret[0].(containerengine.UpdateNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNodePool indicates an expected call of UpdateNodePool.
func (mr *MockClientMockRecorder) UpdateNodePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodePool", reflect.TypeOf((*MockClient)(nil).UpdateNodePool), ctx, request)
}

// UpdateVirtualNodePool mocks base method.
func (m *MockClient) UpdateVirtualNodePool(ctx context.Context, request containerengine.UpdateVirtualNodePoolRequest) (containerengine.UpdateVirtualNodePoolResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVirtualNodePool", ctx, request)
	ret0, _ := ret[0].(containerengine.UpdateVirtualNodePoolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVirtualNodePool indicates an expected call of UpdateVirtualNodePool.
func (mr *MockClientMockRecorder) UpdateVirtualNodePool(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVirtualNodePool", reflect.TypeOf((*MockClient)(nil).UpdateVirtualNodePool), ctx, request)
}
